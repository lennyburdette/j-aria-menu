<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=8" />
	<title>Index</title>
	<link rel="stylesheet" href="css/global.css" type="text/css" media="screen" />
</head>
<body>
	<h1>Accessible, Deeply Nested Navigation</h1>
	
	<ul id="nav">
		<% 10.times do |i| %>
		<li id="section_<%= i %>"><a href="/?section=<%= i %>">Section <%= i %></a></li>
		<% end %>
	</ul>
	
	<form action="#" method="get" accept-charset="utf-8">
		<input type="text" name="some_name" value="" id="some_name" />
		<input type="submit" value="Submit" />
	</form>
	
	<script src="js/application.js" type="text/javascript"></script>
	<script type="text/javascript" charset="utf-8">
		$(function() {

			var idRegExp = /_(\d+)$/,
				EMPTY = new Array(10),

				sectionLinks = $("#nav > li a"),
				lists = [];

			sectionLinks.bind("mouseover focus", initMenuItem);
			sectionLinks.attr("tabindex", -1).eq(0).attr("tabindex", 0);
			var previouslyFocusable = sectionLinks.eq(0);
			
			function appendSectionList(item) {
				if (item.data("init") || ! item.length) {
					return false;
				}
				item.data("init", true);
				
				var id = (item.attr("id").match(idRegExp) || EMPTY)[1],
					sectionList = id ? $("#navSection_" + id) : false;

				if (sectionList.length) {
					item.append(sectionList);
					initList(sectionList);
				}
			};
			
			function initMenuItem(e) {
				appendSectionList($(this).parent());
				$(this).unbind("mouseover focus", initMenuItem);
			};
			
			sectionLinks.bind("focus", function() {
				STATE.current = $(this);
				STATE.level = "top";
				changeFocusable($(this));
			});
			
			function changeFocusable(el) {
				previouslyFocusable.attr("tabindex", -1);
				el.attr("tabindex", 0);
				previouslyFocusable = el;
			};
			
			function machineAction(action, object) {
				STATE.level[action](object);
			};
			
			function initList(list) {
				list.find("> li > a").bind("focus", function() {
					STATE.current = $(this);
					STATE.level = "firstlevel";
					changeFocusable($(this));
				});

				list.find("> li li a").bind("focus", function() {
					STATE.current = $(this);
					STATE.level = "lowerlevel";
					changeFocusable($(this));
				});
				
				list.find("a").attr("tabindex", -1);
			};
			
			var keyboardRepeatInterval,
				mouseDelay;
			
			$("#nav").bind("keydown", function(e) {
				clearInterval(keyboardRepeatInterval);
				clearTimeout(mouseDelay);
				
				var action = machineAction(STATE.level, "keydown", e.keyCode, STATE.current);
				if (action) {
					action();
					
					// keyboardRepeatInterval = setTimeout(function() {
					// 	action();
					// 	keyboardRepeatInterval = setInterval(function() {
					// 		action();
					// 	}, 50);
					// }, 250);
				}
			});
			
			$("#nav a").live("mouseover", function() {
				clearTimeout(mouseDelay);
				
				$(this).focus();
				
				var action = machineAction(STATE.level, "mouse", "over", STATE.current);
				if (action) {
					mouseDelay = setTimeout(function() {
						action();
					}, 200);
				}
			});
			
			$(document).bind("keyup", function() {
				clearInterval(keyboardRepeatInterval);
			});
			
			function machineAction(level, control, event, el) {
				if (MACHINE[level] && MACHINE[level][control] && MACHINE[level][control][event]) {
					
					var funcnames = MACHINE[level][control][event],
						funcs = [];
					
					if (! $.isArray(funcnames)) {
						funcnames = [funcnames];
					}
					
					for (var i = -1, name; name = funcnames[++i];) {
						funcs.push(MACHINE[level][name]);
					}
					
					return function() {
						for (var i = -1, func; func = funcs[++i];) {
							func(el);
						}
					};
				}
			};
			
			function getMachineLevel(el) {
				var list = el.parent().parent();
				
				switch (true) {
					case list.attr("id") === "nav":
						return MACHINE.top;
					case list.hasClass("subsection"):
						return MACHINE.firstlevel;
					default:
						return MACHINE.lowerlevel;
						break;
				};
			};
			
			var STATE = {
				current : null,
				level : null
			};
			
			var MACHINE = {};
			
			MACHINE.top = {
				keydown : {
					37 : ["closeOthers", "previous"], // left
					39 : ["closeOthers", "next"], // right
					40 : ["closeOthers", "open", "focusFirst"], // down
					27 : "blur" // esc
				},
				
				mouse : {
					over : ["closeOthers", "open"]
				},
				
				previous : function(item) {
					item.parent().circularPrev("li").find("> a").focus();
				},
				
				next : function(item) {
					item.parent().circularNext("li").find("> a").focus();
				},
				
				open : function(item) {
					item.parent().find("> ul").show();
				},
				
				blur : function(item) {
					item.blur();
				},
				
				focusFirst : function(item) {
					item.parent().find("> ul > li:first-child > a").focus();
				},
				
				closeOthers : function(item) {
					item.parent().parent().find("ul").hide();
				},
				
				toString : function() {
					return "[Machine top]";
				}
			};
			
			MACHINE.firstlevel = $.extend({}, MACHINE.top, {
				keydown : {
					37 : "close", // left
					38 : "previous", // up
					39 : ["open", "focusFirst"], // right
					40 : "next", // down
					27 : "up", // esc
					9 : "blur" // tab
				},
				
				close : function(item) {
					item.parent().parent().hide();
					var previousMenu = item.parents("#nav > li").circularPrev("li");
					appendSectionList(previousMenu);
					previousMenu.find("> ul").show().find("> li:first-child > a").focus();
				},
				
				up : function(item) {
					item.parent().parent().hide().parent().find("> a").focus();
				},
				
				blur : function(item) {
					item.parents("ul:not(#nav)").hide();
					changeFocusable(item.parents("#nav > li").find("> a"));
				},
				
				toString : function() {
					return "[Machine first]";
				}
			});
			
			MACHINE.lowerlevel = $.extend({}, MACHINE.firstlevel, {
				keydown : {
					37 : "close", // left
					38 : "previous", // up
					39 : "openornext", // right
					40 : "next", // down
					27 : "up", // esc
					9 : "blur" // tab
				},
				
				close : function(item) {
					item.parent().parent().hide().parent().find("> a").focus();
				},
				
				openornext : function(item) {
					var list = item.parent().find("> ul");
					if (list.length) {
						list.show().find("> li:first-child > a").focus();
					} else {
						item.parents("ul:not(#nav)").hide();
						var nextMenu = item.parents("#nav > li").circularNext("li");
						appendSectionList(nextMenu);
						nextMenu.mouseover().find("> ul").show().find("> li:first-child > a").focus();
					}
				},
				
				toString : function() {
					return "[Machine lower]";
				}
			});
			
			$.fn.circularNext = function(pattern) {
				var el = $(this),
					next = el.next(pattern);
				
				if (! next.length) {
					next = el.parent().find("> " + pattern + ":first-child");
				}
				
				return next;
			};
			
			$.fn.circularPrev = function(pattern) {
				var el = $(this),
					prev = el.prev(pattern);
					
				if (! prev.length) {
					prev = el.parent().find("> " + pattern + ":last-child");
				}
				
				return prev;
			};

		});	
	</script>
	
	<div id="navItems">
		<% 10.times do |i| %>
		<ul id="navSection_<%= i %>" class="subsection">
			<% 10.times do |ii| %>
			<li>
				<a href="/?section=<%= i %>&amp;subsection=<%= ii %>">Subsection <%= ii %></a>
				<ul class="subsubsection">
				<% 10.times do |iii| %>
					<li>
						<a href="/?section=<%= i %>&amp;subsection=<%= ii %>&amp;subsubsection=<%= iii %>">Subsubsection <%= iii %></a>
					</li>
				<% end%>
				</ul>
			</li>
			<% end%>
		</ul>
		<% end%>
	</div>
</body>
</html>